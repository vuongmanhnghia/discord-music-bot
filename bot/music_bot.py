"""
Modern Discord Music Bot with clean architecture
Implements the complete playback flow with proper separation of concerns
"""

import asyncio
from typing import Optional

import discord
from discord.ext import commands
from discord import app_commands

from .config import config
from .logger import logger
from .services.audio import audio_service
from .services.playback import playback_service


class MusicBot(commands.Bot):
    def __init__(self):
        # Discord intents
        intents = discord.Intents.default()
        intents.message_content = True
        intents.voice_states = True

        super().__init__(
            command_prefix=config.COMMAND_PREFIX,
            intents=intents,
            help_command=None,
            description="Modern Music Bot with intelligent processing",
        )

        # Setup commands
        self._setup_commands()

    async def setup_hook(self):
        """Initialize bot components"""
        try:
            logger.info("üöÄ Initializing bot components...")

            # Services are initialized on first use
            logger.info("‚úÖ Bot components ready")

            # Sync slash commands globally only
            try:
                synced = await self.tree.sync()
                logger.info(f"‚úÖ Synced {len(synced)} slash commands globally")
                
                # Remove guild-specific syncing to avoid rate limits
                # Guild commands will inherit from global commands
                
            except discord.RateLimited as e:
                logger.warning(f"‚ö†Ô∏è Rate limited while syncing commands. Retry after: {e.retry_after}s")
                await asyncio.sleep(e.retry_after)
                # Retry once
                try:
                    synced = await self.tree.sync()
                    logger.info(f"‚úÖ Retried and synced {len(synced)} slash commands")
                except Exception as retry_e:
                    logger.error(f"‚ùå Failed to sync commands after retry: {retry_e}")
            except discord.HTTPException as e:
                logger.error(f"‚ùå HTTP error syncing commands: {e}")
            except Exception as e:
                logger.error(f"‚ùå Failed to sync slash commands: {e}")

        except Exception as e:
            logger.error(f"‚ùå Failed to initialize bot: {e}")
            raise

    async def on_ready(self):
        """Bot ready event"""
        logger.info(f"üéµ {config.BOT_NAME} is ready!")
        logger.info(f"üìä Connected to {len(self.guilds)} guilds")
        logger.info(f"üîë Command prefix: {config.COMMAND_PREFIX}")
        if self.user:
            logger.info(f"üéØ Bot ID: {self.user.id}")

        # Set bot status
        activity = discord.Activity(
            type=discord.ActivityType.listening,
            name="/help | High-quality streaming",
        )
        await self.change_presence(activity=activity)

    async def on_guild_join(self, guild: discord.Guild):
        """Handle joining new guild"""
        logger.info(f"üÜï Joined new guild: {guild.name} (ID: {guild.id})")
        # Guild state is managed by services automatically

    async def on_guild_remove(self, guild: discord.Guild):
        """Handle leaving guild"""
        logger.info(f"üëã Left guild: {guild.name} (ID: {guild.id})")

        # Cleanup audio connections
        await audio_service.disconnect_from_guild(guild.id)

    async def on_command_error(self, ctx: commands.Context, error: Exception):
        """Global command error handler"""
        logger.error(f"Command error in {ctx.command}: {error}")

        if isinstance(error, commands.CommandNotFound):
            embed = discord.Embed(
                title="‚ùå Unknown Command",
                description=f"Command `{ctx.invoked_with}` not found.\nUse `{config.COMMAND_PREFIX}help` to see available commands.",
                color=discord.Color.red(),
            )

        elif isinstance(error, commands.MissingRequiredArgument):
            embed = discord.Embed(
                title="‚ùå Missing Argument",
                description=f"Missing required argument: `{error.param.name}`\nUse `{config.COMMAND_PREFIX}help {ctx.command}` for usage info.",
                color=discord.Color.red(),
            )

        elif isinstance(error, commands.BadArgument):
            embed = discord.Embed(
                title="‚ùå Invalid Argument",
                description=f"Invalid argument provided.\nUse `{config.COMMAND_PREFIX}help {ctx.command}` for usage info.",
                color=discord.Color.red(),
            )

        elif isinstance(error, commands.MissingPermissions):
            embed = discord.Embed(
                title="‚ùå Missing Permissions",
                description="You don't have the required permissions to use this command.",
                color=discord.Color.red(),
            )

        elif isinstance(error, commands.CommandOnCooldown):
            embed = discord.Embed(
                title="‚è∞ Command Cooldown",
                description=f"Command is on cooldown. Try again in {error.retry_after:.1f} seconds.",
                color=discord.Color.orange(),
            )
    
        # Add rate limit handling
        elif isinstance(error, discord.HTTPException) and error.status == 429:
            retry_after = getattr(error, 'retry_after', None) or error.response.headers.get('Retry-After', '60')
            embed = discord.Embed(
                title="‚ö†Ô∏è Rate Limited",
                description=f"Bot is being rate limited. Please wait {retry_after} seconds and try again.",
                color=discord.Color.orange(),
            )

        else:
            # Unexpected error
            embed = discord.Embed(
                title="‚ùå Unexpected Error",
                description=f"An unexpected error occurred: {str(error)}",
                color=discord.Color.red(),
            )

            # Log full traceback for debugging
            logger.exception(f"Unexpected command error: {error}")

        try:
            await ctx.send(embed=embed, delete_after=30)
        except discord.HTTPException as send_error:
            if send_error.status == 429:
                # If we're rate limited sending the error message, just log it
                logger.warning(f"Rate limited when sending error message: {send_error}")
            else:
                # Fallback to simple message if embed fails
                try:
                    await ctx.send(f"‚ùå Error: {str(error)}", delete_after=30)
                except discord.HTTPException:
                    pass  # Can't send message, give up

    async def on_voice_state_update(
        self, member: discord.Member, before: discord.VoiceState, after: discord.VoiceState
    ):
        """Handle voice state changes"""
        # Only handle when someone leaves
        if before.channel and not after.channel and member.guild:
            # No need for _ensure_guild_state method - services handle this automatically
            pass

        voice_client = discord.utils.get(self.voice_clients, guild=member.guild)
        if not voice_client:
            return

        # Check if bot is alone in voice channel
        channel = voice_client.channel
        if (channel and 
            isinstance(channel, (discord.VoiceChannel, discord.StageChannel)) and 
            hasattr(channel, 'members') and
            len([m for m in channel.members if not m.bot]) == 0):
            logger.info(f"Bot is alone in voice channel, will disconnect from {member.guild.name}")
            
            await asyncio.sleep(60)  # Wait 60 seconds

            # Double-check still alone
            if (channel and 
                isinstance(channel, (discord.VoiceChannel, discord.StageChannel)) and 
                hasattr(channel, 'members') and
                len([m for m in channel.members if not m.bot]) == 0):
                await audio_service.disconnect_from_guild(member.guild.id)

    def _setup_commands(self):
        """Setup all bot slash commands with clean implementation"""

        @self.tree.command(name="join", description="Tham gia voice channel")
        async def join_voice(interaction: discord.Interaction):
            """Join your voice channel"""
            # Check if user is a Member and has voice state
            if not isinstance(interaction.user, discord.Member) or not interaction.user.voice:
                await interaction.response.send_message(
                    "‚ùå B·∫°n c·∫ßn ·ªü trong voice channel!", ephemeral=True
                )
                return

            channel = interaction.user.voice.channel
            if not isinstance(channel, (discord.VoiceChannel, discord.StageChannel)):
                await interaction.response.send_message(
                    "‚ùå Kh√¥ng th·ªÉ tham gia channel n√†y!", ephemeral=True
                )
                return

            success = await audio_service.connect_to_channel(channel)

            if success:
                embed = discord.Embed(
                    title=f"ƒê√£ tham gia k√™nh voice {channel.mention}",
                    description=f"{config.BOT_NAME} „Éª /help",
                    color=discord.Color.green(),
                )
            else:
                embed = discord.Embed(
                    title="Kh√¥ng th·ªÉ tham gia voice channel",
                    description=f"{config.BOT_NAME} „Éª /help",
                    color=discord.Color.red(),
                )
            await interaction.response.send_message(embed=embed)

        @self.tree.command(name="leave", description="R·ªùi voice channel")
        async def leave_voice(interaction: discord.Interaction):
            """üëã Leave voice channel"""
            if not interaction.guild:
                await interaction.response.send_message("‚ùå Ch·ªâ s·ª≠ d·ª•ng trong server!", ephemeral=True)
                return
                
            success = await audio_service.disconnect_from_guild(interaction.guild.id)

            if success:
                embed = discord.Embed(
                    title="ƒê√£ ng·∫Øt k·∫øt n·ªëi voice channel",
                    description=f"{config.BOT_NAME} „Éª /help",
                    color=discord.Color.blue(),
                )
            else:
                embed = discord.Embed(
                    title="Ch∆∞a k·∫øt n·ªëi",
                    description=f"{config.BOT_NAME} „Éª /help",
                    color=discord.Color.red(),
                )
            await interaction.response.send_message(embed=embed)

        @self.tree.command(name="play", description="Ph√°t nh·∫°c t·ª´ URL ho·∫∑c t√¨m ki·∫øm")
        @app_commands.describe(query="URL ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm")
        @app_commands.checks.cooldown(1, 3.0, key=lambda i: (i.guild_id, i.user.id))  # 3 second cooldown per user per guild
        async def play_music(interaction: discord.Interaction, query: str):
            """‚ñ∂Ô∏è Play music from URL or search query"""
            if not interaction.guild:
                await interaction.response.send_message("‚ùå Ch·ªâ s·ª≠ d·ª•ng trong server!", ephemeral=True)
                return
                
            # Ensure bot is connected to voice
            if not audio_service.is_connected(interaction.guild.id):
                if isinstance(interaction.user, discord.Member) and interaction.user.voice:
                    channel = interaction.user.voice.channel
                    if isinstance(channel, (discord.VoiceChannel, discord.StageChannel)):
                        await audio_service.connect_to_channel(channel)
                    else:
                        await interaction.response.send_message(
                            "‚ùå Kh√¥ng th·ªÉ tham gia channel n√†y!", ephemeral=True
                        )
                        return
                else:
                    await interaction.response.send_message(
                        "H√£y tham gia voice channel tr∆∞·ªõc!", ephemeral=True
                    )
                    return

            # Send processing message
            await interaction.response.send_message(
                f"**{query[:50]}{'...' if len(query) > 50 else ''}**"
            )

            try:
                # Process the play request
                success, response_message, song = await playback_service.play_request(
                    user_input=query,
                    guild_id=interaction.guild.id,
                    requested_by=str(interaction.user),
                    auto_play=True,
                )

                if success and song:
                    embed = discord.Embed(
                        title="ƒê√£ th√™m v√†o h√†ng ƒë·ª£i",
                        description=response_message,
                        color=discord.Color.green(),
                    )

                    # Add source type info
                    embed.add_field(
                        name="Ngu·ªìn",
                        value=song.source_type.value.title(),
                        inline=True,
                    )

                    embed.add_field(
                        name="Tr·∫°ng th√°i", value=song.status.value.title(), inline=True
                    )

                    if song.metadata:
                        embed.add_field(
                            name="Th·ªùi l∆∞·ª£ng",
                            value=song.duration_formatted,
                            inline=True,
                        )

                    # Update the processing message
                    await interaction.edit_original_response(embed=embed)

                else:
                    embed = discord.Embed(
                        title="‚ùå L·ªói ph√°t nh·∫°c",
                        description=response_message,
                        color=discord.Color.red(),
                    )
                    await interaction.edit_original_response(embed=embed)

            except Exception as e:
                logger.error(f"Error in play command: {e}")
                embed = discord.Embed(
                    title="‚ùå L·ªói kh√¥ng mong mu·ªën",
                    description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
                    color=discord.Color.red(),
                )
                await interaction.edit_original_response(embed=embed)

        @self.tree.command(name="skip", description="B·ªè qua b√†i hi·ªán t·∫°i")
        @app_commands.checks.cooldown(1, 2.0, key=lambda i: (i.guild_id, i.user.id))  # 2 second cooldown
        async def skip_song(interaction: discord.Interaction):
            """‚è≠Ô∏è Skip current song"""
            if not interaction.guild:
                await interaction.response.send_message("‚ùå Ch·ªâ s·ª≠ d·ª•ng trong server!", ephemeral=True)
                return
                
            if not audio_service.is_connected(interaction.guild.id):
                await interaction.response.send_message(
                    "‚ùå Bot ch∆∞a k·∫øt n·ªëi voice!", ephemeral=True
                )
                return

            success = await audio_service.skip_to_next(interaction.guild.id)

            if success:
                embed = discord.Embed(
                    title="ƒê√£ b·ªè qua b√†i hi·ªán t·∫°i",
                    description=f"{config.BOT_NAME} „Éª /help",
                    color=discord.Color.blue(),
                )
            else:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ b√†i n√†o",
                    description="Kh√¥ng c√≥ b√†i n√†o ƒë·ªÉ b·ªè qua",
                    color=discord.Color.red(),
                )
            await interaction.response.send_message(embed=embed)

        @self.tree.command(name="pause", description="‚è∏Ô∏è T·∫°m d·ª´ng ph√°t")
        async def pause_music(interaction: discord.Interaction):
            """‚è∏Ô∏è Pause current playback"""
            if not interaction.guild:
                await interaction.response.send_message("‚ùå Ch·ªâ s·ª≠ d·ª•ng trong server!", ephemeral=True)
                return
                
            audio_player = audio_service.get_audio_player(interaction.guild.id)
            if not audio_player:
                await interaction.response.send_message(
                    "‚ùå Bot ch∆∞a k·∫øt n·ªëi voice!", ephemeral=True
                )
                return

            success = audio_player.pause()

            if success:
                embed = discord.Embed(
                    title="ƒê√£ t·∫°m d·ª´ng",
                    description=f"{config.BOT_NAME} „Éª /help",
                    color=discord.Color.orange(),
                )
            else:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ g√¨ ƒëang ph√°t",
                    description="Kh√¥ng c√≥ nh·∫°c n√†o ƒëang ph√°t",
                    color=discord.Color.red(),
                )
            await interaction.response.send_message(embed=embed)

        @self.tree.command(name="resume", description="Ti·∫øp t·ª•c ph√°t nh·∫°c")
        async def resume_music(interaction: discord.Interaction):
            """‚ñ∂Ô∏è Resume paused playback"""
            if not interaction.guild:
                await interaction.response.send_message("‚ùå Ch·ªâ s·ª≠ d·ª•ng trong server!", ephemeral=True)
                return
                
            audio_player = audio_service.get_audio_player(interaction.guild.id)
            if not audio_player:
                await interaction.response.send_message(
                    "‚ùå Bot ch∆∞a k·∫øt n·ªëi voice!", ephemeral=True
                )
                return

            success = audio_player.resume()

            if success:
                embed = discord.Embed(
                    title="ƒê√£ ti·∫øp t·ª•c ph√°t nh·∫°c",
                    description=f"{config.BOT_NAME} „Éª /help",
                    color=discord.Color.green(),
                )
            else:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ g√¨ b·ªã t·∫°m d·ª´ng",
                    description="Kh√¥ng c√≥ nh·∫°c n√†o b·ªã t·∫°m d·ª´ng",
                    color=discord.Color.red(),
                )
            await interaction.response.send_message(embed=embed)

        @self.tree.command(name="stop", description="D·ª´ng v√† x√≥a h√†ng ƒë·ª£i")
        async def stop_music(interaction: discord.Interaction):
            """‚èπÔ∏è Stop playback and clear queue"""
            if not interaction.guild:
                await interaction.response.send_message("‚ùå Ch·ªâ s·ª≠ d·ª•ng trong server!", ephemeral=True)
                return
                
            audio_player = audio_service.get_audio_player(interaction.guild.id)
            if not audio_player:
                await interaction.response.send_message(
                    "‚ùå Bot ch∆∞a k·∫øt n·ªëi voice!", ephemeral=True
                )
                return

            audio_player.stop()
            queue_manager = audio_service.get_queue_manager(interaction.guild.id)
            if queue_manager:
                queue_manager.clear()

            embed = discord.Embed(
                title="ƒê√£ d·ª´ng",
                description=f"{config.BOT_NAME} „Éª /help",
                color=discord.Color.red(),
            )
            await interaction.response.send_message(embed=embed)

        @self.tree.command(name="queue", description="Hi·ªÉn th·ªã h√†ng ƒë·ª£i hi·ªán t·∫°i")
        async def show_queue(interaction: discord.Interaction):
            """üìã Show current queue"""
            if not interaction.guild:
                await interaction.response.send_message("‚ùå Ch·ªâ s·ª≠ d·ª•ng trong server!", ephemeral=True)
                return
                
            queue_manager = audio_service.get_queue_manager(interaction.guild.id)
            if not queue_manager:
                await interaction.response.send_message(
                    "‚ùå Kh√¥ng c√≥ h√†ng ƒë·ª£i n√†o!", ephemeral=True
                )
                return

            current_song = queue_manager.current_song
            upcoming_songs = queue_manager.get_upcoming(limit=10)

            if not current_song and not upcoming_songs:
                embed = discord.Embed(
                    title="Kh√¥ng c√≥ b√†i n√†o trong h√†ng ƒë·ª£i",
                    description=f"{config.BOT_NAME} „Éª /help",
                    color=discord.Color.blue(),
                )
                await interaction.response.send_message(embed=embed)
                return

            embed = discord.Embed(
                title="H√†ng ƒë·ª£i hi·ªán t·∫°i",
                color=discord.Color.blue(),
            )

            # Current song
            if current_song:
                embed.add_field(
                    name="ƒêang ph√°t",
                    value=f"**{current_song.display_name}**",
                    inline=False,
                )

            # Upcoming songs
            if upcoming_songs:
                queue_text = ""
                for i, song in enumerate(upcoming_songs[:10], 1):
                    queue_text += f"{i}. {song.display_name}\n"

                if len(upcoming_songs) > 10:
                    queue_text += f"... v√† {len(upcoming_songs) - 10} b√†i kh√°c"

                embed.add_field(
                    name="Ti·∫øp theo",
                    value=queue_text or "Kh√¥ng c√≥",
                    inline=False,
                )

            await interaction.response.send_message(embed=embed)

        @self.tree.command(name="volume", description="ƒê·∫∑t √¢m l∆∞·ª£ng (0-100)")
        @app_commands.describe(volume="√Çm l∆∞·ª£ng t·ª´ 0 ƒë·∫øn 100")
        async def set_volume(interaction: discord.Interaction, volume: Optional[int] = None):
            """üîä Set playback volume (0-100)"""
            if not interaction.guild:
                await interaction.response.send_message("‚ùå Ch·ªâ s·ª≠ d·ª•ng trong server!", ephemeral=True)
                return
                
            audio_player = audio_service.get_audio_player(interaction.guild.id)
            if not audio_player:
                await interaction.response.send_message(
                    "‚ùå Bot ch∆∞a k·∫øt n·ªëi voice!", ephemeral=True
                )
                return

            if volume is None:
                # Show current volume
                current_volume = int(audio_player.volume * 100)
                embed = discord.Embed(
                    title=f"√Çm l∆∞·ª£ng hi·ªán t·∫°i: {current_volume}%",
                    description=f"{config.BOT_NAME} „Éª /help",
                    color=discord.Color.blue(),
                )
                await interaction.response.send_message(embed=embed)
                return

            # Validate volume
            if volume < 0 or volume > 100:
                await interaction.response.send_message(
                    "‚ùå √Çm l∆∞·ª£ng ph·∫£i t·ª´ 0 ƒë·∫øn 100!", ephemeral=True
                )
                return

            # Set volume
            audio_player.set_volume(volume / 100.0)

            embed = discord.Embed(
                title=f"ƒê√£ ƒë·∫∑t √¢m l∆∞·ª£ng: {volume}%",
                description=f"{config.BOT_NAME} „Éª /help",
                color=discord.Color.green(),
            )
            await interaction.response.send_message(embed=embed)

        @self.tree.command(name="nowplaying", description="Hi·ªÉn th·ªã b√†i ƒëang ph√°t")
        async def now_playing(interaction: discord.Interaction):
            """üéµ Show currently playing song"""
            if not interaction.guild:
                await interaction.response.send_message("‚ùå Ch·ªâ s·ª≠ d·ª•ng trong server!", ephemeral=True)
                return
                
            audio_player = audio_service.get_audio_player(interaction.guild.id)
            if not audio_player or not audio_player.current_song:
                await interaction.response.send_message(
                    "‚ùå Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t!", ephemeral=True
                )
                return

            song = audio_player.current_song

            embed = discord.Embed(
                title=f"ƒêang ph√°t: {song.display_name}",
                description=f"{config.BOT_NAME} „Éª /help",
                color=discord.Color.green(),
            )

            # Add metadata if available
            if song.metadata:
                embed.add_field(
                    name="Th·ªùi l∆∞·ª£ng",
                    value=song.duration_formatted,
                    inline=True,
                )

                if song.metadata.artist:
                    embed.add_field(
                        name="Ngh·ªá sƒ©",
                        value=song.metadata.artist,
                        inline=True,
                    )

                if song.metadata.album:
                    embed.add_field(
                        name="Album",
                        value=song.metadata.album,
                        inline=True,
                    )

            embed.add_field(
                name="Tr·∫°ng th√°i",
                value="ƒêang ph√°t" if audio_player.is_playing else "T·∫°m d·ª´ng",
                inline=True,
            )

            embed.add_field(
                name="√Çm l∆∞·ª£ng",
                value=f"{int(audio_player.volume * 100)}%",
                inline=True,
            )

            await interaction.response.send_message(embed=embed)

        @self.tree.command(name="repeat", description="Set repeat mode")
        @app_commands.describe(mode="Repeat mode: off, song, queue")
        async def repeat_mode(interaction: discord.Interaction, mode: str):
            """Set repeat mode for the queue"""
            if not interaction.guild:
                await interaction.response.send_message("This command can only be used in a server.")
                return

            guild_id = interaction.guild.id
            queue_manager = audio_service.get_queue_manager(guild_id)
            
            if not queue_manager:
                await interaction.response.send_message("No queue found. Use `/play` first.")
                return

            if mode.lower() not in ["off", "song", "queue"]:
                await interaction.response.send_message("Invalid mode. Use: off, song, or queue")
                return

            queue_manager._repeat_mode = mode.lower()
            
            mode_names = {
                "off": "T·∫Øt l·∫∑p",
                "song": "L·∫∑p b√†i h√°t",
                "queue": "L·∫∑p h√†ng ƒë·ª£i"
            }
            
            await interaction.response.send_message(f"Repeat mode set to: **{mode_names[mode.lower()]}**")


        @self.tree.command(name="help", description="Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p")
        async def show_help(interaction: discord.Interaction):
            """‚ùì Show help information"""
            embed = discord.Embed(
                title=f"{config.BOT_NAME} - Tr·ª£ gi√∫p",
                color=discord.Color.blue(),
            )

            # Connection commands
            connection_cmds = [
                f"> `/join`  - Tham gia voice channel",
                f"> `/leave` - R·ªùi voice channel",
            ]

            embed.add_field(name="", value="\n".join(connection_cmds), inline=False)

            # Playback commands
            playback_cmds = [
                f"> `/play <query>` - Ph√°t nh·∫°c (URL ho·∫∑c t√¨m ki·∫øm)",
                f"> `/pause`        - T·∫°m d·ª´ng ph√°t",
                f"> `/resume`       - Ti·∫øp t·ª•c ph√°t",
                f"> `/skip`         - B·ªè qua b√†i hi·ªán t·∫°i",
                f"> `/stop`         - D·ª´ng v√† x√≥a h√†ng ƒë·ª£i",
            ]

            embed.add_field(name="", value="\n".join(playback_cmds), inline=False)

            # Queue commands
            queue_cmds = [
                f"> `/queue`          - Hi·ªÉn th·ªã h√†ng ƒë·ª£i hi·ªán t·∫°i",
                f"> `/nowplaying`     - Hi·ªÉn th·ªã b√†i hi·ªán t·∫°i",
                f"> `/volume <0-100>` - ƒê·∫∑t √¢m l∆∞·ª£ng",
            ]

            embed.add_field(name="", value="\n".join(queue_cmds), inline=False)

            embed.add_field(
                name="",
                value="‚Ä¢ YouTube URLs\n‚Ä¢ Spotify URLs (chuy·ªÉn ƒë·ªïi th√†nh YouTube)\n‚Ä¢ T√¨m ki·∫øm\n‚Ä¢ SoundCloud URLs",
                inline=False,
            )

            await interaction.response.send_message(embed=embed)

    async def close(self):
        """Clean shutdown"""
        logger.info("üõë Shutting down bot...")

        try:
            # Cleanup audio connections
            await audio_service.cleanup_all()
            logger.info("‚úÖ Bot shutdown complete")

        except Exception as e:
            logger.error(f"‚ùå Error during shutdown: {e}")

        await super().close()
